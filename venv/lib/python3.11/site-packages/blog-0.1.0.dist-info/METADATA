Metadata-Version: 2.3
Name: blog
Version: 0.1.0
Summary: A FastAPI-based blog application
Author: Your Name
Author-email: your.email@example.com
Requires-Python: >=3.8,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: Pillow (>=10.2.0,<11.0.0)
Requires-Dist: alembic (>=1.13.1,<2.0.0)
Requires-Dist: fastapi (>=0.109.0,<0.110.0)
Requires-Dist: passlib[bcrypt] (>=1.7.4,<2.0.0)
Requires-Dist: psycopg2-binary (>=2.9.9,<3.0.0)
Requires-Dist: pydantic (>=2.6.1,<3.0.0)
Requires-Dist: pydantic-settings (>=2.1.0,<3.0.0)
Requires-Dist: python-jose[cryptography] (>=3.3.0,<4.0.0)
Requires-Dist: python-multipart (>=0.0.6,<0.0.7)
Requires-Dist: python-slugify (>=8.0.1,<9.0.0)
Requires-Dist: sqlalchemy (>=2.0.25,<3.0.0)
Requires-Dist: uvicorn (>=0.27.0,<0.28.0)
Description-Content-Type: text/markdown

# Blog API

A modern blog API built with FastAPI and PostgreSQL.

## Features

- RESTful API endpoints for blog posts, albums, and photos
- PostgreSQL database with SQLAlchemy ORM
- File upload support for images
- Automatic API documentation with OpenAPI/Swagger
- Poetry for dependency management

## Prerequisites

- Python 3.8 or higher
- Poetry
- PostgreSQL

## Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/blog.git
cd blog
```

2. Install dependencies using Poetry:
```bash
poetry install
```

3. Create a `.env` file in the root directory with the following content:
```env
POSTGRES_SERVER=localhost
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=blog
POSTGRES_PORT=5432
```

4. Create the database:
```bash
createdb blog
```

## Running the Application

1. Activate the Poetry shell:
```bash
poetry shell
```

2. Run the application:
```bash
uvicorn app.main:app --reload
```

The API will be available at `http://localhost:8000` and the OpenAPI documentation at `http://localhost:8000/docs`.

## API Endpoints

### Posts
- `GET /api/v1/posts` - List all posts
- `POST /api/v1/posts` - Create a new post
- `GET /api/v1/posts/{post_id}` - Get a specific post
- `GET /api/v1/posts/slug/{slug}` - Get a post by slug
- `PUT /api/v1/posts/{post_id}` - Update a post
- `DELETE /api/v1/posts/{post_id}` - Delete a post
- `POST /api/v1/posts/{post_id}/upload-image` - Upload a post image

### Albums
- `GET /api/v1/albums` - List all albums
- `POST /api/v1/albums` - Create a new album
- `GET /api/v1/albums/{album_id}` - Get a specific album
- `GET /api/v1/albums/slug/{slug}` - Get an album by slug
- `PUT /api/v1/albums/{album_id}` - Update an album
- `DELETE /api/v1/albums/{album_id}` - Delete an album
- `POST /api/v1/albums/{album_id}/upload-cover` - Upload an album cover

### Photos
- `GET /api/v1/photos` - List all photos
- `GET /api/v1/photos/album/{album_id}` - List photos in an album
- `POST /api/v1/photos/album/{album_id}` - Add a photo to an album
- `GET /api/v1/photos/{photo_id}` - Get a specific photo
- `PUT /api/v1/photos/{photo_id}` - Update a photo
- `DELETE /api/v1/photos/{photo_id}` - Delete a photo

## Development

### Database Migrations

The project uses Alembic for database migrations. To create a new migration:

```bash
alembic revision --autogenerate -m "description"
```

To apply migrations:

```bash
alembic upgrade head
```

## License

This project is licensed under the MIT License - see the LICENSE file for details.
